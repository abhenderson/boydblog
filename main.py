# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/2025-03-19-ComputerProjectBlogCode.ipynb.

# %% auto 0
__all__ = ['nbpaths', 'app', 'rt', 'get_nb_paths', 'get_title_and_desc', 'NBLink', 'mk_nblink_from_nbpath',
           'get_date_from_iso8601_prefix', 'NBCard', 'mk_nbcard_from_nb_path', 'InLi', 'InlineNav', 'index', 'about',
           'StyledCode', 'MonsterHtmlRenderer', 'StyledMd', 'StyledCell', 'notebook', 'versions', 'wellknown']

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 5
from datetime import datetime
from execnb.nbio import read_nb
from nb2fasthtml.core import render_code_output
from fastcore.utils import *
from fasthtml.common import *
from fasthtml.jupyter import *
from importlib.metadata import distributions
from IPython.display import display, HTML
from monsterui import franken
from monsterui.all import Theme
from mistletoe import markdown
from mistletoe.html_renderer import block_token, HtmlRenderer
import pygments
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 6
def get_nb_paths(): 
    root = Path() if IN_NOTEBOOK else Path("nbs/")
    return L(root.glob("*.ipynb")).sorted(reverse=True)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 7
nbpaths = get_nb_paths()
nbpaths

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 10
# app,rt = fast_app(pico=False)
app,rt = fast_app(
    pico=False,
    ws_hdr=True,
    live=False,
    default_hdrs=False,
    hdrs=(
#        Link(rel='stylesheet', href='static/pico.min.css'),
        Link(rel="stylesheet", href="static/tailwind.css"),
        Script(src="static/htmx.min.js"),
        Script(src="static/fasthtml.js"),
        Script(src="static/surreal.js"),
        Script(src="static/script.js"),
        Script(src="static/index.global.js"),
        Meta(charset='utf-8'),
#        Script(type='module')
    ),
)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 14
def get_nb_paths(): 
    root = Path() if IN_NOTEBOOK else Path("nbs/")
    return L(root.glob("*.ipynb")).sorted(reverse=True)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 16
def get_title_and_desc(fpath):
    nb = read_nb(fpath)
    title = nb.cells[0].source.lstrip("# ")
    desc = nb.cells[1].source
    return title,desc

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 18
def NBLink(title, desc, href, date):
    return Div(
        A(f"{date:%b %-d} â€¢ {title}", href=href, cls="text-md font-semibold hover:text-blue-600 no-underline block"),
        P(desc, cls="text-s text-gray-500 mt-0.5 mb-2"),
        cls="py-1 break-inside-avoid")

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 19
def mk_nblink_from_nbpath(nbpath):
    date = get_date_from_iso8601_prefix(nbpath.name) or datetime.now()
    return NBLink(*get_title_and_desc(nbpath), href=f'/nbs/{nbpath.name[:-6]}', date=date)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 20
def get_date_from_iso8601_prefix(fname):
    "Gets date from first 10 chars YYYY-MM-DD of `fname`, where `fname` is like `2025-01-12-Get-Date-From-This.whatever"
    try:
        return datetime.fromisoformat(str(fname)[0:10])
    except ValueError: return datetime.now()

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 24
def NBCard(title,desc,href,date):
    return A(
        franken.Card(
        franken.CardTitle(franken.H3(title)), 
        franken.P(f"{date:%a, %b %-d, %Y}", cls=franken.TextPresets.muted_sm),
        franken.P(desc),
        body_cls='space-y-2'
    ), href=href)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 25
def mk_nbcard_from_nb_path(nb_path):
    date = get_date_from_iso8601_prefix(nb_path.name) or datetime.now()
    return NBCard(*get_title_and_desc(nb_path), href=f'/nbs/{nb_path.name[:-6]}', date=date)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 27
def InLi(linktuple):
    txt, href = linktuple
    return Li(A(txt, href=href), style="display:inline;margin-right:1em")

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 28
def InlineNav():
    nls = L(
        ("Alex Henderson Computer Project Blog", "http://ubuntu2410blog:8000"),
        ("GitHub repo for this site", "https://github.com/abhenderson")
    )
    return Nav(
        Ul(
            *nls.map(InLi),
            style="list-style:none;padding-left:0"
        ),
        aria_label="Main navigation",
        role="navigation"
    )

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 30
@rt
def index():
    nb_paths = get_nb_paths()
    return (
#        Theme.blue.headers(),
#        Script(src="https://unpkg.com/@tailwindcss/browser@4"),
#        Script(src="static/index.global.js"),
#        Script(src="/static/index.global.js"),
        Script(src="/static/tailwind.css"),
        Link(rel="stylesheet", href="static/tailwind.css"),
        Title("Alex Henderson Computer Project Blog"),
        Div(
            H1('Alex Henderson Computer Project Blog', cls="text-2x1 font-bold mb-2 dark:text-gray-100"),
            P(
                "Project Notebooks and Notes for my Computer Tasks ",
                A("github.com/abhenderson",
                  href="https://github.com/abhenderson",
                  cls="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"),
                cls="mb-4 text-gray-600 dark:text-gray-300 text-sm"
            ),
            Div(
                *nbpaths.map(mk_nblink_from_nbpath),
                cls="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-2"
            ),
            cls="mx-auto px-2 py-4 dark:bg-gray-900 min-h-screen"
#            cls="md:flex"
#            cls="px-4 py-8 w-full columns-1 md:columns-2 lg:columns-3 gap-6"
        ),
    )

"""
        franken.Container(
#             InlineNav(),  # TODO: Fix incompatibilities with MonsterUI
            Div(
                franken.H1('Alex Henderson Computer Project Blog'),
                franken.P("Lessons I am learning from my various computer projects ", franken.A("About Me", href="/about")),
                franken.P("Notebooks I use to track my learning ", franken.A("Alex Project Blog", href="https://github.com/abhenderson"), cls="mb-6"),
            ),
            franken.Grid(*nb_paths.map(mk_nbcard_from_nb_path), cols_sm=1, cols_md=1, cols_lg=2, cols_xl=3)
        )
"""

def NBLink(title, desc, href, date):
    return Div(
        A(
            Div(
                f"{date:%b %-d}", 
                cls="text-xs font-medium text-gray-500 dark:text-gray-400"
            ),
            Div(
                title,
                cls="text-base font-medium leading-snug hover:text-blue-600 dark:text-gray-100 dark:hover:text-blue-400"
            ),
            P(
                desc,
                cls="text-xs text-gray-600 dark:text-gray-400 mt-0.5 line-clamp-2"
            ),
            href=href,
            cls="block no-underline hover:bg-gray-50 dark:hover:bg-gray-800 p-2 rounded transition-colors"
        ),
        cls="break-inside-avoid"
    )

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 32
@rt
def about():
    nb_paths = get_nb_paths()
    return (
        Style(':root {font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", sans-serif; color-scheme: light dark;} body {background-color: light-dark(#ffffff, #1a1a1a); color: light-dark(#1a1a1a, #ffffff);} p {line-height: 1.5;}'),
        Theme.blue.headers(),
#        InlineNav(),
        Title("About page"),
        franken.Container(
            InlineNav(),
            Div(
                franken.H1('About Page'), franken.P("My about page"), cls="mb-6"),
        ),
    )

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 34
def StyledCode(c, style='monokai'):
    fm = HtmlFormatter(style=style, cssclass=style, prestyles="padding:10px 0;")
    h = highlight(c, PythonLexer(), fm)
    sd = fm.get_style_defs(f".{style}")
    return Style(sd), NotStr(h)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 35
class MonsterHtmlRenderer(HtmlRenderer):
    def render_heading(self, token: block_token.Heading) -> str:
        template = '<h{level} class="uk-h{level}">{inner}</h{level}>'
        inner = self.render_inner(token)
        return template.format(level=token.level, inner=inner)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 36
def StyledMd(m):
    return Safe(markdown(m, MonsterHtmlRenderer))

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 37
def StyledCell(c):
    if c.cell_type == "markdown": return StyledMd(c.source)
    if c.cell_type == "code": 
        if not c.outputs: return StyledCode(c.source)
        return StyledCode(c.source), render_code_output(c)

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 39
@rt("/nbs/{name}")
def notebook(name:str):
    fname = f"{name}.ipynb" if IN_NOTEBOOK else f"nbs/{name}.ipynb"
    fpath = Path(fname)
    nb = read_nb(fpath)
    title = nb.cells[0].source.lstrip("# ")
    date = get_date_from_iso8601_prefix(fname.lstrip("nbs/"))
    desc = nb.cells[1].source
    if "MonsterUI" in title:
        return (
            Theme.slate.headers(),
#             InlineNav(),  # TODO: Fix incompatibilities with MonsterUI
            Title(title),
            franken.Container(
                Header(
                    # TODO: refactor Tailwind margin classes to use MonsterUI DivVStacked or DivFullySpaced
                    franken.H1(title, cls=("my-6",)),
                    franken.P(f"by Alex Henderson Blog | {date:%a, %b %-d, %Y}", cls=(franken.TextT.sm, franken.PaddingT.lg, "mb-6")),
                    franken.P(desc, cls=("mb-6",)),
                    Hr()
                ),
                *L(nb.cells[2:]).map(StyledCell),
                cls="space-y-5"
            )
    )
    return (
        Style(':root {font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", sans-serif; color-scheme: light dark;} body {background-color: light-dark(#ffffff, #1a1a1a); color: light-dark(#1a1a1a, #ffffff);} p {line-height: 1.5;}'),
        InlineNav(),
        Title(title),
        Div(
            H1(title), # Title
            P(Small(f"by Alex Henderson Blog | {date:%a, %b %-d, %Y}")),
            P(desc),
            Hr(),
            *L(nb.cells[2:]).map(StyledCell),
            cls="space-y-5"
        )
    )

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 41
@rt
def versions():
    dists = L([NS(name=dist.metadata['Name'], version=dist.version) for dist in distributions()]).sorted('name')
    dists = [Li(f'{d.name}: {d.version}') for d in dists]
    return (Title('Python Package Versions'),
        Style(':root {font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", sans-serif; color-scheme: light dark;} body {background-color: light-dark(#ffffff, #1a1a1a); color: light-dark(#1a1a1a, #ffffff);} p {line-height: 1.5;}'),   
        Div(
            H1('Python Package Versions'),
            Ul(*dists)          
        )       
    )

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 43
@rt('/.well-known/{fname}')
def wellknown(fname: str):
    fpath = f"../.well-known/{fname}" if IN_NOTEBOOK else f".well-known/{fname}"
    return Path(fpath).read_text()

# %% nbs/2025-03-19-ComputerProjectBlogCode.ipynb 45
serve()
